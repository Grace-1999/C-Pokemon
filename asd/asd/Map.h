#pragma once
#include "Basic.h"
#include "Pokemon.h"

class InitMap
{

public:
	enum TileType
	{
		WALL = '1',         // 벽
		EMPTY = '0',        // 빈 공간
		GRASS = '5',        // 풀(포켓몬 등장 구역)
		PLAYER = 'T',       // 플레이어
		PATH = 'P',         // 길
		WATER = 'W',        // 물
		TREE = 'R',         // 나무
		MOUNTAIN = 'M',     // 산
		HOUSE = 'H',        // 집
		CAVE = 'V',         // 동굴 입구
		BRIDGE = 'B'        // 다리
	};

	void SetConsoleSize(int width, int height)
	{
		HWND console = GetConsoleWindow();
		RECT r;
		GetWindowRect(console, &r);
		MoveWindow(console, r.left, r.top, width, height, TRUE);
	}

	// 화면 지우기 함수
	void ClearScreen()
	{
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		CONSOLE_SCREEN_BUFFER_INFO csbi;
		DWORD count;
		DWORD cellCount;
		COORD homeCoords = { 0, 0 };

		// 콘솔 화면 정보 가져오기
		if (!GetConsoleScreenBufferInfo(hConsole, &csbi))
			return;

		// 전체 셀 수 계산
		cellCount = csbi.dwSize.X * csbi.dwSize.Y;

		// 콘솔 화면 전체를 공백으로 채우기
		if (!FillConsoleOutputCharacter(hConsole, (TCHAR)' ', cellCount, homeCoords, &count))
			return;

		// 콘솔 화면 전체 속성 초기화
		if (!FillConsoleOutputAttribute(hConsole, csbi.wAttributes, cellCount, homeCoords, &count))
			return;

		// 커서 위치 초기화
		SetConsoleCursorPosition(hConsole, homeCoords);
	}

	// 커서 위치 설정 함수
	void SetCursorPosition(int x, int y)
	{
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		COORD coord = { (SHORT)x, (SHORT)y };
		SetConsoleCursorPosition(hConsole, coord);
	}

	void InitUnicode()
	{
		SetConsoleOutputCP(CP_UTF8);
		SetConsoleCP(CP_UTF8);
	}

	vector<vector<char>> GetOriginalMap()
	{
		return
		{
			/*0*/  { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
			/*1*/  { '1', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'P', 'P', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '0', '0', 'R', 'R', 'R', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', 'R', 'R', '1' },
			/*1*/  { '1', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'P', 'P', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '0', '0', 'R', 'R', 'R', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', 'R', 'R', '1' },
			/*2*/  { '1', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '0', '0', 'R', 'R', 'R', 'R', 'R', 'R', 'W', 'W', 'W', 'W', 'W', 'R', 'R', 'R', '1' },
			/*3*/  { '1', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'P', 'P', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'P', 'P', 'P', 'P', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'R', 'R', 'M', 'M', 'M', 'R', 'W', 'W', 'W', 'W', 'W', 'R', 'R', 'R', '1' },
			/*4*/  { '1', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'P', 'P', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'R', 'R', 'M', 'M', 'M', 'M', 'R', 'W', 'W', 'W', 'W', 'R', 'R', 'R', '1' },
			/*5*/  { '1', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'P', 'P', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'R', 'R', 'M', 'M', 'M', 'M', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', '1' },
			/*6*/  { '1', 'W', 'W', 'W', 'W', 'G', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*7*/  { '1', 'W', 'W', 'W', 'W', 'U', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*8*/  { '1', 'W', 'W', 'W', 'R', 'U', 'R', 'R', 'P', 'P', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'W', 'W', 'W', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*9*/  { '1', 'W', 'W', 'R', 'R', 'U', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'W', 'W', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*10*/ { '1', 'W', 'R', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'R', 'R', 'W', 'W', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*10*/ { '1', 'R', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'R', 'W', 'W', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*10*/ { '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*10*/ { '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*11*/ { '1', 'R', 'R', 'R', '0', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*12*/ { '1', 'W', 'W', 'W', 'U', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*13*/ { '1', 'W', 'W', 'W', 'U', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*14*/ { '1', 'W', 'W', 'W', 'U', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*15*/ { '1', 'W', 'W', 'W', 'U', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*16*/ { '1', 'W', 'W', 'W', 'I', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*17*/ { '1', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*18*/ { '1', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'R', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1' },
			/*19*/ { '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1' },
		};
		
	}

	vector<vector<char>>Init(pair<int, int> Player, bool clearScreen = false)
	{
		vector < vector<char>>arr = GetOriginalMap();

		arr[Player.first][Player.second] = 'T';
		if (clearScreen)
			ClearScreen();
		else 
			cout.flush();
			SetCursorPosition(0, 0);

		for (int i = 0; i < arr.size(); i++)
		{
			for (int j = 0; j < arr[i].size(); j++)
			{
				if (arr[i][j] == '1') // 벽
				{
					cout << "\033[37m■\033[0m";}
				else if (arr[i][j] == '0') // 빈 공간
				{
					cout << " ";}
				else if (arr[i][j] == 'T') // 플레이어
				{
					cout << "\033[34m◆\033[0m";}
				else if (arr[i][j] == '5') // 풀
				{
					cout << "\033[32m,\033[0m";	}
				else if (arr[i][j] == 'P') // 바위
				{
					cout << "\033[38;5;130m■\033[0m";}
				else if (arr[i][j] == 'W') // 물
				{
					cout << "\033[36m~\033[0m";	}
				else if (arr[i][j] == 'R') // 나무
				{
					cout << "\033[32m♣\033[0m";}
				else if (arr[i][j] == 'M') // 산
				{
					cout << "\033[90m▲\033[0m";}
				else if (arr[i][j] == 'G') // 
				{
					cout << "\033[33m┌\033[0m";}
				else if (arr[i][j] == 'I') // 
				{
					cout << "\033[33m└\033[0m";}
				else if (arr[i][j] == 'U') // 세로
				{
					cout << "\033[33m∥\033[0m";}
				else if (arr[i][j] == 'H') // 집
				{
					cout << "\033[33m⌂\033[0m";	}
				else if (arr[i][j] == 'N') // NPC
				{
					cout << "\033[97m@\033[0m";	}
				else if (arr[i][j] == 'V') // 동굴
				{
					cout << "\033[90mO\033[0m";	}
				else if (arr[i][j] == 'B') // 다리
				{
					cout << "\033[33m=\033[0m";	}
				else
					cout << arr[i][j];
			}
			cout << endl;
		}
		{
			ShowUI();
		}
		return arr;
	};

	void ShowUI()
	{
		cout << endl << "==============================" << endl;
		cout << "1. 포켓몬 확인" << endl;
		cout << "2. 아이템 확인" << endl;
		cout << "3. 종료" << endl;
		cout << "==============================" << endl;
	}

	void When_Battle()
	{
		vector<string>arr = {
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
		"!!!!!!!!!!!!!!!야생 포켓몬 등장!!!!!!!!!!!!!!!!",
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		};

		for (int i = 0; i < arr.size(); i++)
		{
			cout << arr[i] << endl;
			this_thread::sleep_for(chrono::milliseconds(100));
		}

		this_thread::sleep_for(chrono::milliseconds(3000));

	}

	void ShowPokeBallAnimation(const string& ballType)
	{
		ClearScreen();
		if (ballType == "MasterBall") {
			ClearScreen();
			cout << "마스터볼이 빛나기 시작한다..." << endl;
			this_thread::sleep_for(chrono::milliseconds(1000));
		}

		ClearScreen();
		cout << "흔들흔들... " << endl;
		cout << "            " << endl;
		cout << "       ◎   " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "   ◎       " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들... " << endl;
		cout << "            " << endl;
		cout << "       ◎   " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "   ◎       " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들... " << endl;
		cout << "            " << endl;
		cout << "       ◎   " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "   ◎       " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들... " << endl;
		cout << "            " << endl;
		cout << "       ◎   " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));

		ClearScreen();
		cout << "흔들흔들..." << endl;
		cout << "            " << endl;
		cout << "     ◎     " << endl;
		cout << "            " << endl;
		this_thread::sleep_for(chrono::milliseconds(300));
		ClearScreen();
	}

};